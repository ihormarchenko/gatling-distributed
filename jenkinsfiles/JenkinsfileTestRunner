// Params for Terraform
IAM_INSTANCE_PROFILE = params.IAM_INSTANCE_PROFILE ?: "jmeter_server"
INSTANCE_TYPE = params.INSTANCE_TYPE ?: null
TEST_ENV = params.TEST_ENV ?: null
AWS_SUBNET_ID = params.AWS_SUBNET_ID ?: null
AWS_VPC_SECURITY_GROUP_IDS = params.AWS_VPC_SECURITY_GROUP_IDS ?: null
AWS_INSTANCE_COUNT = params.AWS_INSTANCE_COUNT ?: null

GENERATE_HTML_REPORT = params.GENERATE_HTML_REPORT ?: false
RUN_TEST_ON_MASTER = params.RUN_TEST_ON_MASTER ?: false
GATLING_COMMAND = params.GATLING_COMMAND ?: false

def isDestroyed = false
node("${NODE}"){
    env.TERRAFORM_CMD = 'docker run --rm --network=host -w /app -v ${HOME}/.aws:/root/.aws -v ${HOME}/.ssh:/root/.ssh -v ${PWD}/terraform-scripts/gatling-node:/app hashicorp/terraform:light'
    buildDockerGatlingCommand()
    try {
        stage('checkout repo') {
            checkout scm
        }
        if(RUN_TEST_ON_MASTER == true){
            deleteGatlingLog()
            isDestroyed = true
            try {
                stage('Run test') {
                    sh """
                        echo "Starting..."
                        ${DOCKER_GATLING_COMMAND}
                    """
                }
            if(GENERATE_HTML_REPORT == true) {
                archiveAndGenerateReport()
            }
            } catch (Exception e) {
                echo "Test was interrupted"
                stopContainer()
            }
        }else{
            buildTerraformParams()
            stage('pull latest light terraform image') {
                sh  """
                    docker pull hashicorp/terraform:light
                    """
            }

            stage('save image for instances') {
                sh  """
                    docker save gatling/gatling-node -o `pwd`/terraform-scripts/gatling-node/gatling-node.tar
                    docker save fluent/fluentd:latest -o `pwd`/terraform-scripts/gatling-node/fluentd.tar
                    """
            }

            stage('init') {
                sh  """
                ${TERRAFORM_CMD} init -backend=true -input=false ${TERRAFORM_CMD_PARAMS}
                """
            }
            stage('plan') {
                sh  """
                ${TERRAFORM_CMD} plan -out=tfplan -input=false ${TERRAFORM_CMD_PARAMS}
                """
            }
            try{
                stage('apply') {
                    sh  """
                    ${TERRAFORM_CMD} apply -lock=false -input=true -parallelism=${AWS_INSTANCE_COUNT} tfplan
                    """
                }
            }catch (Exception e){
                destroyResources()
                isDestroyed = true
                throw e
            }

            try{
                stage('Run test') {
                    sh  """
                        chmod +x ${WORKSPACE}/start-distributed-test.sh
                        ${WORKSPACE}/start-distributed-test.sh "\$(ips=`${TERRAFORM_CMD} output instance_private_ips` && echo \$ips | sed -e 's/\\s//g')" "${DOCKER_GATLING_COMMAND}"
                    """
                }
            } catch (Exception e) {
                echo "Test was interrupted"
            }

            if(!isDestroyed){
                destroyResources()
            }
            isDestroyed = true
        }

    } catch (Exception interruptEx) {
        if(!isDestroyed){
            destroyResources()
        }
        currentBuild.result = "FAILED"
        throw interruptEx
    } finally {
        // Success or failure, always send notifications
        // notifyBuild(currentBuild.result)
    }
}

def notifyBuild(String buildStatus = 'STARTED') {
    // build status of null means successful
    buildStatus =  buildStatus ?: 'SUCCESSFUL'

    // Default values
    def colorName = 'RED'
    def colorCode = '#FF0000'
    def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
    def summary = "${subject} (${env.BUILD_URL})"

    // Override default values based on build status
    if (buildStatus == 'STARTED') {
        color = 'YELLOW'
        colorCode = '#FFFF00'
    } else if (buildStatus == 'SUCCESSFUL') {
        color = 'GREEN'
        colorCode = '#00FF00'
    } else {
        color = 'RED'
        colorCode = '#FF0000'
    }

    // Send notifications
    slackSend (color: colorCode, message: summary)
}

def archiveAndGenerateReport(){
    try {
        stage('Archive report'){
            sh '''
                volume_ids=`docker volume ls --filter "name=gatling-logs" -q`
                if [[ $volume_ids != "" ]]; then path=`docker volume inspect $volume_ids --format '{{ .Mountpoint }}'`; fi
                for var in $path
                do
                sudo cp -r $var/${JOB_BASE_NAME} /tmp/
                echo "Report was copied"
                arhive_name=${JOB_BASE_NAME}`date '+%Y-%m-%d-%H:%M:%S'`.zip
                arhive_path=/tmp/$arhive_name
                sudo zip -r -9 $arhive_path /tmp/${JOB_BASE_NAME}/*
                echo "Report was zipped"
                sudo rm -rf /tmp/${JOB_BASE_NAME}/
                echo "Report folder was deleted from temp"
                cp $arhive_path ./$arhive_name
                done
            '''
            archiveArtifacts '${JOB_BASE_NAME}*.zip'
        }
    } catch (Exception e) {
        echo "======================================"
        echo e.getMessage()
        echo "======================================"
    }
}



def deleteGatlingLog(){
    try {
        stage('Delete logfile'){
            sh '''
                volume_ids=`docker volume ls --filter "name=gatling-logs" -q`
                if [[ $volume_ids != "" ]]; then path=`docker volume inspect $volume_ids --format '{{ .Mountpoint }}'`; fi
                for var in $path
                do
                    sudo rm -rf $var/${JOB_BASE_NAME}
                done
            '''
        }
    } catch (Exception e) {
        echo "======================================"
        echo "Folder or file does not exist'"
        echo e.getMessage()
        echo "======================================"
    }
}

DOCKER_GATLING_COMMAND = null
def buildDockerGatlingCommand(){
    if (GATLING_COMMAND == null) {
        throw new NullPointerException("Param GATLING_COMMAND must be specified.")
    }
    DOCKER_GATLING_COMMAND = "docker run --rm --name '${JOB_BASE_NAME}-${BUILD_ID}' -v gatling-logs:/opt/gatling/results/ gatling/gatling-node -rf /opt/gatling/results/${JOB_BASE_NAME} ${GATLING_COMMAND}"
    echo "DOCKER_GATLING_COMMAND=${DOCKER_GATLING_COMMAND}"
}


TERRAFORM_CMD_PARAMS = null
def buildTerraformParams(){
    if (TEST_ENV == null) {
        throw new NullPointerException("Param TEST_ENV must be specified.")
    }
    if (AWS_SUBNET_ID == null) {
        throw new NullPointerException("Param AWS_SUBNET_ID must be specified.")
    }
    if (AWS_VPC_SECURITY_GROUP_IDS == null) {
        throw new NullPointerException("Param AWS_VPC_SECURITY_GROUP_IDS must be specified.")
    }
    if (INSTANCE_TYPE == null) {
        echo "Param INSTANCE_TYPE is not specified, default 't2.micro'"
        INSTANCE_TYPE = "t2.micro"
    }
    if (AWS_INSTANCE_COUNT == null) {
        echo "Param AWS_INSTANCE_COUNT is not specified, default '1'"
        AWS_INSTANCE_COUNT = "1"
    }

    TERRAFORM_CMD_PARAMS = "-var 'iam_instance_profile=${IAM_INSTANCE_PROFILE}' -var 'instance_type=${INSTANCE_TYPE}' -var 'env=${TEST_ENV}' -var 'subnet_id=${AWS_SUBNET_ID}' -var 'vpc_security_group_ids=${AWS_VPC_SECURITY_GROUP_IDS}' -var 'count=${AWS_INSTANCE_COUNT}'"
}




//Destroy terraform resources
def destroyResources() {
    stage('destroy') {
        echo "Destroy resources"
        sh  """
            ${TERRAFORM_CMD} destroy -lock=false -input=true -auto-approve ${TERRAFORM_CMD_PARAMS}
            """
    }
}

def stopContainer(){
    sh  """
            docker stop "${JOB_BASE_NAME}-${BUILD_ID}"
        """
}
