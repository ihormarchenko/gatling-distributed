input {
    file {
        ignore_older => 3600
        type           => "gatling"
        path => [ "/gatling-logs/**/*.log"]
        start_position => "beginning"
    }
    file {
        type => "jmeter"
        ignore_older => 3600
        path => [ "/jmeter-logs/*.jtl"]
        start_position => "beginning"
    }
}

filter {
    if [type] == "gatling"{
        if ([message] =~ "\bRUN\b" or [message] =~ "\bSTART\b" or [message] =~ "\bEND\b" or [message] =~ "\bGROUP\b") {
            drop { }
        }
        grok {
            match => { 
                "message" => "\t%{DATA:scenario_name}\t%{NOTSPACE:user_id}\t+%{DATA:request_name}\t%{INT:request_start:int}\t%{INT:request_end:int}\t%{WORD:status}" 
            }
        }
        ruby {
            code =>  "event.set('response_time', event.get('request_end') - event.get('request_start'))"
        }

        date {
            match => [ "request_start", "yyyy/MM/dd HH:mm:ss","ISO8601","UNIX_MS" ]
            target => "gatling_time_stamp"
        }

        mutate {
            gsub => [
                "status", "OK", true,
                "status", "KO", false
            ]
            remove_field => ["host", "path", "type", "message"] # If you have use for these then don't remove them.
        }    
    }
    if [type] == "jmeter"{
        csv {
            columns => ["timeStamp","elapsed","label","responseCode","responseMessage","threadName","dataType","success","failureMessage","bytes","sentBytes","grpThreads","allThreads","Latency","IdleTime","Connect"]
            skip_header => true
            convert => {
                "elapsed" => "integer"
                "responseCode" => "integer"
                "success" => "boolean"
                "bytes" => "integer"
                "sentBytes" => "integer"
                "allThreads" => "integer"
                "Latency" => "integer"
                "IdleTime" => "integer"
                "Connect" => "integer"
            }
        }
        date {
            match => [ "timeStamp", "yyyy/MM/dd HH:mm:ss","ISO8601","UNIX_MS" ]
            target => "timeStamp"
        }
        mutate { 
             copy => { "threadName" => "testName" }
        }
        mutate { 
             gsub => [
                "testName", "\s{,2}\d+-\d+", ""
             ]
             remove_field => ["message"]
        }
    }
}


output {
    if [type] == "jmeter"{
        elasticsearch {
            hosts => ["${ELASTICSEARCH_HOST:localhost:9200}"]
            index => "logstash-jmeter-%{+YYYY.MM.dd}"
        }
    }else{
        elasticsearch {
            hosts => ["${ELASTICSEARCH_HOST:localhost:9200}"]
            index => "logstash-gatling-%{+YYYY.MM.dd}"
        }
    }
    
    #stdout { codec => json }
}
    
